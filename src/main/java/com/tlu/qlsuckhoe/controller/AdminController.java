/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:53 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import org.demo.controller.assembler.AdminResourceAssembler;
import org.demo.controller.resource.AdminResource;
import com.tlu.qlsuckhoe.entity.Admin;
import com.tlu.qlsuckhoe.service.AdminServiceImpl;
import com.tlu.qlsuckhoe.service.criteria.AdminCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/admin", produces = "application/hal+json")
public class AdminController {

	private static final Logger LOGGER = LoggerFactory.getLogger(AdminController.class);

	private static final String NOT_FOUND ="Admin not found";

	@Autowired
	private AdminServiceImpl adminService;

	@Autowired
	private PagedResourcesAssembler<Admin> pageAssember;

	private AdminResourceAssembler adminResourceAssembler = new AdminResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<AdminResource>> search(Pageable pageable, AdminCriteria criteria) {
		LOGGER.info("Admins search [pageable={}|AdminCriteria={}", pageable, criteria);
		final Page<Admin> result = adminService.search(pageable, criteria);
		LOGGER.info("Found {} admins !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, adminResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idadmin}")
	public ResponseEntity<AdminResource> get(@PathVariable("idadmin") Integer idadmin) {
		LOGGER.info("Admin get with id {}", resolveIdForLogger(idadmin));
		final Admin admin = adminService.get(idadmin);
		if (admin == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((AdminResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Admin found : {}", admin);
		final AdminResource adminResource = adminResourceAssembler.toResource(admin);
		return new ResponseEntity<>(adminResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<AdminResource> create(@RequestBody Admin admin) {
		LOGGER.info("Admin creation request : {}", admin);
		if (adminService.exist(admin)) {
			LOGGER.info("Admin already exist ! : {}", admin);
			return new ResponseEntity<>((AdminResource) null, HttpStatus.CONFLICT);
		} else {
			final Admin created = adminService.create(admin);
			LOGGER.info("Created admin {}", created);
			return new ResponseEntity<>(adminResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idadmin}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idadmin") Integer idadmin, @RequestBody Admin admin) {
		LOGGER.info("Admin update request [id={} | admin={}}", resolveIdForLogger(idadmin), admin);
		// force the id (use the id provided by the URL)
		admin.setIdadmin(idadmin);
		if (adminService.save(admin)) {
			LOGGER.info("Admin succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idadmin}")
	public ResponseEntity<Void> delete(@PathVariable("idadmin") Integer idadmin) {
		LOGGER.info("Admin deletion request : {}", resolveIdForLogger(idadmin));
		if (adminService.delete(idadmin)) {
			LOGGER.info("Admin succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idadmin) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idadmin));
		return ids.toString();
	}

}
