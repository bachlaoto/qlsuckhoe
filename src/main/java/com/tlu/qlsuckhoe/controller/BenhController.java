/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:41 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Benh;
import com.tlu.qlsuckhoe.service.BenhServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/benh", produces = "application/hal+json")
public class BenhController {

	private static final Logger LOGGER = LoggerFactory.getLogger(BenhController.class);

	private static final String NOT_FOUND ="Benh not found";

	@Autowired
	private BenhServiceImpl benhService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Benh> findAll() {
		List<Benh> list = benhService.findAll();
		return list;
	}


	@GetMapping("{idbenh}")
	public Benh get(@PathVariable("idbenh") Integer idbenh) {
		final Benh benh = benhService.getOne(idbenh);
		LOGGER.info("Benh found : {}", benh);
		return benh;
	}

	@PostMapping(consumes = "application/json")
	public Benh create(@RequestBody Benh benh) {
		LOGGER.info("Benh creation request : {}", benh);
		if (benhService.exist(benh)) {
			LOGGER.info("Benh already exist ! : {}", benh);
			return null;
		} else {
			final Benh created = benhService.create(benh);
			LOGGER.info("Created benh {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idbenh}", consumes = "application/json")
	public Benh update(@PathVariable("idbenh") Integer idbenh, @RequestBody Benh benh) {
		return benhService.update(benh);
	}

	@DeleteMapping("{idbenh}")
	public void delete(@PathVariable("idbenh") Integer idbenh) {
		LOGGER.info("Benh deletion request : {}", resolveIdForLogger(idbenh));
		if (benhService.delete(idbenh)) {
			LOGGER.info("Benh succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idbenh) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idbenh));
		return ids.toString();
	}

}

