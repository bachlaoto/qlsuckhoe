/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:41 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Danhmuc;
import com.tlu.qlsuckhoe.service.DanhmucServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/danhmuc", produces = "application/hal+json")
public class DanhmucController {

	private static final Logger LOGGER = LoggerFactory.getLogger(DanhmucController.class);

	private static final String NOT_FOUND ="Danhmuc not found";

	@Autowired
	private DanhmucServiceImpl danhmucService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Danhmuc> findAll() {
		List<Danhmuc> list = danhmucService.findAll();
		return list;
	}


	@GetMapping("{iddanhmuc}")
	public Danhmuc get(@PathVariable("iddanhmuc") Integer iddanhmuc) {
		final Danhmuc danhmuc = danhmucService.getOne(iddanhmuc);
		LOGGER.info("Danhmuc found : {}", danhmuc);
		return danhmuc;
	}

	@PostMapping(consumes = "application/json")
	public Danhmuc create(@RequestBody Danhmuc danhmuc) {
		LOGGER.info("Danhmuc creation request : {}", danhmuc);
		if (danhmucService.exist(danhmuc)) {
			LOGGER.info("Danhmuc already exist ! : {}", danhmuc);
			return null;
		} else {
			final Danhmuc created = danhmucService.create(danhmuc);
			LOGGER.info("Created danhmuc {}", created);
			return created;
		}
	}

	@PutMapping(value = "{iddanhmuc}", consumes = "application/json")
	public Danhmuc update(@PathVariable("iddanhmuc") Integer iddanhmuc, @RequestBody Danhmuc danhmuc) {
		return danhmucService.update(danhmuc);
	}

	@DeleteMapping("{iddanhmuc}")
	public void delete(@PathVariable("iddanhmuc") Integer iddanhmuc) {
		LOGGER.info("Danhmuc deletion request : {}", resolveIdForLogger(iddanhmuc));
		if (danhmucService.delete(iddanhmuc)) {
			LOGGER.info("Danhmuc succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer iddanhmuc) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(iddanhmuc));
		return ids.toString();
	}

}

