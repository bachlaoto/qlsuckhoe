/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:41 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Dinhky;
import com.tlu.qlsuckhoe.service.DinhkyServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/dinhky", produces = "application/hal+json")
public class DinhkyController {

	private static final Logger LOGGER = LoggerFactory.getLogger(DinhkyController.class);

	private static final String NOT_FOUND ="Dinhky not found";

	@Autowired
	private DinhkyServiceImpl dinhkyService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Dinhky> findAll() {
		List<Dinhky> list = dinhkyService.findAll();
		return list;
	}


	@GetMapping("{idkhamdinhky}")
	public Dinhky get(@PathVariable("idkhamdinhky") Integer idkhamdinhky) {
		final Dinhky dinhky = dinhkyService.getOne(idkhamdinhky);
		LOGGER.info("Dinhky found : {}", dinhky);
		return dinhky;
	}

	@PostMapping(consumes = "application/json")
	public Dinhky create(@RequestBody Dinhky dinhky) {
		LOGGER.info("Dinhky creation request : {}", dinhky);
		if (dinhkyService.exist(dinhky)) {
			LOGGER.info("Dinhky already exist ! : {}", dinhky);
			return null;
		} else {
			final Dinhky created = dinhkyService.create(dinhky);
			LOGGER.info("Created dinhky {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idkhamdinhky}", consumes = "application/json")
	public Dinhky update(@PathVariable("idkhamdinhky") Integer idkhamdinhky, @RequestBody Dinhky dinhky) {
		return dinhkyService.update(dinhky);
	}

	@DeleteMapping("{idkhamdinhky}")
	public void delete(@PathVariable("idkhamdinhky") Integer idkhamdinhky) {
		LOGGER.info("Dinhky deletion request : {}", resolveIdForLogger(idkhamdinhky));
		if (dinhkyService.delete(idkhamdinhky)) {
			LOGGER.info("Dinhky succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idkhamdinhky) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idkhamdinhky));
		return ids.toString();
	}

}

