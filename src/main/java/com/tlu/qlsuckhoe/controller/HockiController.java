/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import org.demo.controller.assembler.HockiResourceAssembler;
import org.demo.controller.resource.HockiResource;
import com.tlu.qlsuckhoe.entity.Hocki;
import com.tlu.qlsuckhoe.service.HockiServiceImpl;
import com.tlu.qlsuckhoe.service.criteria.HockiCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/hocki", produces = "application/hal+json")
public class HockiController {

	private static final Logger LOGGER = LoggerFactory.getLogger(HockiController.class);

	private static final String NOT_FOUND ="Hocki not found";

	@Autowired
	private HockiServiceImpl hockiService;

	@Autowired
	private PagedResourcesAssembler<Hocki> pageAssember;

	private HockiResourceAssembler hockiResourceAssembler = new HockiResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<HockiResource>> search(Pageable pageable, HockiCriteria criteria) {
		LOGGER.info("Hockis search [pageable={}|HockiCriteria={}", pageable, criteria);
		final Page<Hocki> result = hockiService.search(pageable, criteria);
		LOGGER.info("Found {} hockis !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, hockiResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idhocki}")
	public ResponseEntity<HockiResource> get(@PathVariable("idhocki") Integer idhocki) {
		LOGGER.info("Hocki get with id {}", resolveIdForLogger(idhocki));
		final Hocki hocki = hockiService.get(idhocki);
		if (hocki == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((HockiResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Hocki found : {}", hocki);
		final HockiResource hockiResource = hockiResourceAssembler.toResource(hocki);
		return new ResponseEntity<>(hockiResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<HockiResource> create(@RequestBody Hocki hocki) {
		LOGGER.info("Hocki creation request : {}", hocki);
		if (hockiService.exist(hocki)) {
			LOGGER.info("Hocki already exist ! : {}", hocki);
			return new ResponseEntity<>((HockiResource) null, HttpStatus.CONFLICT);
		} else {
			final Hocki created = hockiService.create(hocki);
			LOGGER.info("Created hocki {}", created);
			return new ResponseEntity<>(hockiResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idhocki}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idhocki") Integer idhocki, @RequestBody Hocki hocki) {
		LOGGER.info("Hocki update request [id={} | hocki={}}", resolveIdForLogger(idhocki), hocki);
		// force the id (use the id provided by the URL)
		hocki.setIdhocki(idhocki);
		if (hockiService.save(hocki)) {
			LOGGER.info("Hocki succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idhocki}")
	public ResponseEntity<Void> delete(@PathVariable("idhocki") Integer idhocki) {
		LOGGER.info("Hocki deletion request : {}", resolveIdForLogger(idhocki));
		if (hockiService.delete(idhocki)) {
			LOGGER.info("Hocki succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idhocki) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idhocki));
		return ids.toString();
	}

}
