/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:41 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Hocki;
import com.tlu.qlsuckhoe.service.HockiServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/hocki", produces = "application/hal+json")
public class HockiController {

	private static final Logger LOGGER = LoggerFactory.getLogger(HockiController.class);

	private static final String NOT_FOUND ="Hocki not found";

	@Autowired
	private HockiServiceImpl hockiService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Hocki> findAll() {
		List<Hocki> list = hockiService.findAll();
		return list;
	}


	@GetMapping("{idhocki}")
	public Hocki get(@PathVariable("idhocki") Integer idhocki) {
		final Hocki hocki = hockiService.getOne(idhocki);
		LOGGER.info("Hocki found : {}", hocki);
		return hocki;
	}

	@PostMapping(consumes = "application/json")
	public Hocki create(@RequestBody Hocki hocki) {
		LOGGER.info("Hocki creation request : {}", hocki);
		if (hockiService.exist(hocki)) {
			LOGGER.info("Hocki already exist ! : {}", hocki);
			return null;
		} else {
			final Hocki created = hockiService.create(hocki);
			LOGGER.info("Created hocki {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idhocki}", consumes = "application/json")
	public Hocki update(@PathVariable("idhocki") Integer idhocki, @RequestBody Hocki hocki) {
		return hockiService.update(hocki);
	}

	@DeleteMapping("{idhocki}")
	public void delete(@PathVariable("idhocki") Integer idhocki) {
		LOGGER.info("Hocki deletion request : {}", resolveIdForLogger(idhocki));
		if (hockiService.delete(idhocki)) {
			LOGGER.info("Hocki succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idhocki) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idhocki));
		return ids.toString();
	}

}

