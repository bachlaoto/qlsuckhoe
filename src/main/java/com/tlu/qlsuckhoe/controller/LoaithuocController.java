/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.service.criteria.LoaithuocCriteria;
import org.demo.controller.assembler.LoaithuocResourceAssembler;
import org.demo.controller.resource.LoaithuocResource;
import com.tlu.qlsuckhoe.entity.Loaithuoc;
import com.tlu.qlsuckhoe.service.LoaithuocServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/loaithuoc", produces = "application/hal+json")
public class LoaithuocController {

	private static final Logger LOGGER = LoggerFactory.getLogger(LoaithuocController.class);

	private static final String NOT_FOUND ="Loaithuoc not found";

	@Autowired
	private LoaithuocServiceImpl loaithuocService;

	@Autowired
	private PagedResourcesAssembler<Loaithuoc> pageAssember;

	private LoaithuocResourceAssembler loaithuocResourceAssembler = new LoaithuocResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<LoaithuocResource>> search(Pageable pageable, LoaithuocCriteria criteria) {
		LOGGER.info("Loaithuocs search [pageable={}|LoaithuocCriteria={}", pageable, criteria);
		final Page<Loaithuoc> result = loaithuocService.search(pageable, criteria);
		LOGGER.info("Found {} loaithuocs !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, loaithuocResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idloaithuoc}")
	public ResponseEntity<LoaithuocResource> get(@PathVariable("idloaithuoc") Integer idloaithuoc) {
		LOGGER.info("Loaithuoc get with id {}", resolveIdForLogger(idloaithuoc));
		final Loaithuoc loaithuoc = loaithuocService.get(idloaithuoc);
		if (loaithuoc == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((LoaithuocResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Loaithuoc found : {}", loaithuoc);
		final LoaithuocResource loaithuocResource = loaithuocResourceAssembler.toResource(loaithuoc);
		return new ResponseEntity<>(loaithuocResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<LoaithuocResource> create(@RequestBody Loaithuoc loaithuoc) {
		LOGGER.info("Loaithuoc creation request : {}", loaithuoc);
		if (loaithuocService.exist(loaithuoc)) {
			LOGGER.info("Loaithuoc already exist ! : {}", loaithuoc);
			return new ResponseEntity<>((LoaithuocResource) null, HttpStatus.CONFLICT);
		} else {
			final Loaithuoc created = loaithuocService.create(loaithuoc);
			LOGGER.info("Created loaithuoc {}", created);
			return new ResponseEntity<>(loaithuocResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idloaithuoc}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idloaithuoc") Integer idloaithuoc, @RequestBody Loaithuoc loaithuoc) {
		LOGGER.info("Loaithuoc update request [id={} | loaithuoc={}}", resolveIdForLogger(idloaithuoc), loaithuoc);
		// force the id (use the id provided by the URL)
		loaithuoc.setIdloaithuoc(idloaithuoc);
		if (loaithuocService.save(loaithuoc)) {
			LOGGER.info("Loaithuoc succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idloaithuoc}")
	public ResponseEntity<Void> delete(@PathVariable("idloaithuoc") Integer idloaithuoc) {
		LOGGER.info("Loaithuoc deletion request : {}", resolveIdForLogger(idloaithuoc));
		if (loaithuocService.delete(idloaithuoc)) {
			LOGGER.info("Loaithuoc succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idloaithuoc) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idloaithuoc));
		return ids.toString();
	}

}
