/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Loaithuoc;
import com.tlu.qlsuckhoe.service.LoaithuocServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/loaithuoc", produces = "application/hal+json")
public class LoaithuocController {

	private static final Logger LOGGER = LoggerFactory.getLogger(LoaithuocController.class);

	private static final String NOT_FOUND ="Loaithuoc not found";

	@Autowired
	private LoaithuocServiceImpl loaithuocService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Loaithuoc> findAll() {
		List<Loaithuoc> list = loaithuocService.findAll();
		return list;
	}


	@GetMapping("{idloaithuoc}")
	public Loaithuoc get(@PathVariable("idloaithuoc") Integer idloaithuoc) {
		final Loaithuoc loaithuoc = loaithuocService.getOne(idloaithuoc);
		LOGGER.info("Loaithuoc found : {}", loaithuoc);
		return loaithuoc;
	}

	@PostMapping(consumes = "application/json")
	public Loaithuoc create(@RequestBody Loaithuoc loaithuoc) {
		LOGGER.info("Loaithuoc creation request : {}", loaithuoc);
		if (loaithuocService.exist(loaithuoc)) {
			LOGGER.info("Loaithuoc already exist ! : {}", loaithuoc);
			return null;
		} else {
			final Loaithuoc created = loaithuocService.create(loaithuoc);
			LOGGER.info("Created loaithuoc {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idloaithuoc}", consumes = "application/json")
	public Loaithuoc update(@PathVariable("idloaithuoc") Integer idloaithuoc, @RequestBody Loaithuoc loaithuoc) {
		return loaithuocService.update(loaithuoc);
	}

	@DeleteMapping("{idloaithuoc}")
	public void delete(@PathVariable("idloaithuoc") Integer idloaithuoc) {
		LOGGER.info("Loaithuoc deletion request : {}", resolveIdForLogger(idloaithuoc));
		if (loaithuocService.delete(idloaithuoc)) {
			LOGGER.info("Loaithuoc succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idloaithuoc) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idloaithuoc));
		return ids.toString();
	}

}

