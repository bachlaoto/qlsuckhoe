/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Nhasanxuat;
import com.tlu.qlsuckhoe.service.NhasanxuatServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/nhasanxuat", produces = "application/hal+json")
public class NhasanxuatController {

	private static final Logger LOGGER = LoggerFactory.getLogger(NhasanxuatController.class);

	private static final String NOT_FOUND ="Nhasanxuat not found";

	@Autowired
	private NhasanxuatServiceImpl nhasanxuatService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Nhasanxuat> findAll() {
		List<Nhasanxuat> list = nhasanxuatService.findAll();
		return list;
	}


	@GetMapping("{idnhasanxuat}")
	public Nhasanxuat get(@PathVariable("idnhasanxuat") Integer idnhasanxuat) {
		final Nhasanxuat nhasanxuat = nhasanxuatService.getOne(idnhasanxuat);
		LOGGER.info("Nhasanxuat found : {}", nhasanxuat);
		return nhasanxuat;
	}

	@PostMapping(consumes = "application/json")
	public Nhasanxuat create(@RequestBody Nhasanxuat nhasanxuat) {
		LOGGER.info("Nhasanxuat creation request : {}", nhasanxuat);
		if (nhasanxuatService.exist(nhasanxuat)) {
			LOGGER.info("Nhasanxuat already exist ! : {}", nhasanxuat);
			return null;
		} else {
			final Nhasanxuat created = nhasanxuatService.create(nhasanxuat);
			LOGGER.info("Created nhasanxuat {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idnhasanxuat}", consumes = "application/json")
	public Nhasanxuat update(@PathVariable("idnhasanxuat") Integer idnhasanxuat, @RequestBody Nhasanxuat nhasanxuat) {
		return nhasanxuatService.update(nhasanxuat);
	}

	@DeleteMapping("{idnhasanxuat}")
	public void delete(@PathVariable("idnhasanxuat") Integer idnhasanxuat) {
		LOGGER.info("Nhasanxuat deletion request : {}", resolveIdForLogger(idnhasanxuat));
		if (nhasanxuatService.delete(idnhasanxuat)) {
			LOGGER.info("Nhasanxuat succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idnhasanxuat) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idnhasanxuat));
		return ids.toString();
	}

}

