/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import org.demo.controller.assembler.NhasanxuatResourceAssembler;
import org.demo.controller.resource.NhasanxuatResource;
import com.tlu.qlsuckhoe.entity.Nhasanxuat;
import com.tlu.qlsuckhoe.service.NhasanxuatServiceImpl;
import com.tlu.qlsuckhoe.service.criteria.NhasanxuatCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/nhasanxuat", produces = "application/hal+json")
public class NhasanxuatController {

	private static final Logger LOGGER = LoggerFactory.getLogger(NhasanxuatController.class);

	private static final String NOT_FOUND ="Nhasanxuat not found";

	@Autowired
	private NhasanxuatServiceImpl nhasanxuatService;

	@Autowired
	private PagedResourcesAssembler<Nhasanxuat> pageAssember;

	private NhasanxuatResourceAssembler nhasanxuatResourceAssembler = new NhasanxuatResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<NhasanxuatResource>> search(Pageable pageable, NhasanxuatCriteria criteria) {
		LOGGER.info("Nhasanxuats search [pageable={}|NhasanxuatCriteria={}", pageable, criteria);
		final Page<Nhasanxuat> result = nhasanxuatService.search(pageable, criteria);
		LOGGER.info("Found {} nhasanxuats !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, nhasanxuatResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idnhasanxuat}")
	public ResponseEntity<NhasanxuatResource> get(@PathVariable("idnhasanxuat") Integer idnhasanxuat) {
		LOGGER.info("Nhasanxuat get with id {}", resolveIdForLogger(idnhasanxuat));
		final Nhasanxuat nhasanxuat = nhasanxuatService.get(idnhasanxuat);
		if (nhasanxuat == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((NhasanxuatResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Nhasanxuat found : {}", nhasanxuat);
		final NhasanxuatResource nhasanxuatResource = nhasanxuatResourceAssembler.toResource(nhasanxuat);
		return new ResponseEntity<>(nhasanxuatResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<NhasanxuatResource> create(@RequestBody Nhasanxuat nhasanxuat) {
		LOGGER.info("Nhasanxuat creation request : {}", nhasanxuat);
		if (nhasanxuatService.exist(nhasanxuat)) {
			LOGGER.info("Nhasanxuat already exist ! : {}", nhasanxuat);
			return new ResponseEntity<>((NhasanxuatResource) null, HttpStatus.CONFLICT);
		} else {
			final Nhasanxuat created = nhasanxuatService.create(nhasanxuat);
			LOGGER.info("Created nhasanxuat {}", created);
			return new ResponseEntity<>(nhasanxuatResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idnhasanxuat}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idnhasanxuat") Integer idnhasanxuat, @RequestBody Nhasanxuat nhasanxuat) {
		LOGGER.info("Nhasanxuat update request [id={} | nhasanxuat={}}", resolveIdForLogger(idnhasanxuat), nhasanxuat);
		// force the id (use the id provided by the URL)
		nhasanxuat.setIdnhasanxuat(idnhasanxuat);
		if (nhasanxuatService.save(nhasanxuat)) {
			LOGGER.info("Nhasanxuat succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idnhasanxuat}")
	public ResponseEntity<Void> delete(@PathVariable("idnhasanxuat") Integer idnhasanxuat) {
		LOGGER.info("Nhasanxuat deletion request : {}", resolveIdForLogger(idnhasanxuat));
		if (nhasanxuatService.delete(idnhasanxuat)) {
			LOGGER.info("Nhasanxuat succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idnhasanxuat) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idnhasanxuat));
		return ids.toString();
	}

}
