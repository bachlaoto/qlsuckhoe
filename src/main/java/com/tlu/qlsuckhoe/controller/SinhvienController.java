/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Sinhvien;
import com.tlu.qlsuckhoe.service.SinhvienServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/sinhvien", produces = "application/hal+json")
public class SinhvienController {

	private static final Logger LOGGER = LoggerFactory.getLogger(SinhvienController.class);

	private static final String NOT_FOUND ="Sinhvien not found";

	@Autowired
	private SinhvienServiceImpl sinhvienService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Sinhvien> findAll() {
		List<Sinhvien> list = sinhvienService.findAll();
		return list;
	}


	@GetMapping("{idsinhvien}")
	public Sinhvien get(@PathVariable("idsinhvien") Integer idsinhvien) {
		final Sinhvien sinhvien = sinhvienService.getOne(idsinhvien);
		LOGGER.info("Sinhvien found : {}", sinhvien);
		return sinhvien;
	}

	@PostMapping(consumes = "application/json")
	public Sinhvien create(@RequestBody Sinhvien sinhvien) {
		LOGGER.info("Sinhvien creation request : {}", sinhvien);
		if (sinhvienService.exist(sinhvien)) {
			LOGGER.info("Sinhvien already exist ! : {}", sinhvien);
			return null;
		} else {
			final Sinhvien created = sinhvienService.create(sinhvien);
			LOGGER.info("Created sinhvien {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idsinhvien}", consumes = "application/json")
	public Sinhvien update(@PathVariable("idsinhvien") Integer idsinhvien, @RequestBody Sinhvien sinhvien) {
		return sinhvienService.update(sinhvien);
	}

	@DeleteMapping("{idsinhvien}")
	public void delete(@PathVariable("idsinhvien") Integer idsinhvien) {
		LOGGER.info("Sinhvien deletion request : {}", resolveIdForLogger(idsinhvien));
		if (sinhvienService.delete(idsinhvien)) {
			LOGGER.info("Sinhvien succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idsinhvien) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idsinhvien));
		return ids.toString();
	}

}

