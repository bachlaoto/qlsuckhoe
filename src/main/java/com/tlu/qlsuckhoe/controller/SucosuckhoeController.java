/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Sucosuckhoe;
import com.tlu.qlsuckhoe.service.SucosuckhoeServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/sucosuckhoe", produces = "application/hal+json")
public class SucosuckhoeController {

	private static final Logger LOGGER = LoggerFactory.getLogger(SucosuckhoeController.class);

	private static final String NOT_FOUND ="Sucosuckhoe not found";

	@Autowired
	private SucosuckhoeServiceImpl sucosuckhoeService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Sucosuckhoe> findAll() {
		List<Sucosuckhoe> list = sucosuckhoeService.findAll();
		return list;
	}


	@GetMapping("{idsucosuckhoe}")
	public Sucosuckhoe get(@PathVariable("idsucosuckhoe") Integer idsucosuckhoe) {
		final Sucosuckhoe sucosuckhoe = sucosuckhoeService.getOne(idsucosuckhoe);
		LOGGER.info("Sucosuckhoe found : {}", sucosuckhoe);
		return sucosuckhoe;
	}

	@PostMapping(consumes = "application/json")
	public Sucosuckhoe create(@RequestBody Sucosuckhoe sucosuckhoe) {
		LOGGER.info("Sucosuckhoe creation request : {}", sucosuckhoe);
		if (sucosuckhoeService.exist(sucosuckhoe)) {
			LOGGER.info("Sucosuckhoe already exist ! : {}", sucosuckhoe);
			return null;
		} else {
			final Sucosuckhoe created = sucosuckhoeService.create(sucosuckhoe);
			LOGGER.info("Created sucosuckhoe {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idsucosuckhoe}", consumes = "application/json")
	public Sucosuckhoe update(@PathVariable("idsucosuckhoe") Integer idsucosuckhoe, @RequestBody Sucosuckhoe sucosuckhoe) {
		return sucosuckhoeService.update(sucosuckhoe);
	}

	@DeleteMapping("{idsucosuckhoe}")
	public void delete(@PathVariable("idsucosuckhoe") Integer idsucosuckhoe) {
		LOGGER.info("Sucosuckhoe deletion request : {}", resolveIdForLogger(idsucosuckhoe));
		if (sucosuckhoeService.delete(idsucosuckhoe)) {
			LOGGER.info("Sucosuckhoe succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idsucosuckhoe) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idsucosuckhoe));
		return ids.toString();
	}

}

