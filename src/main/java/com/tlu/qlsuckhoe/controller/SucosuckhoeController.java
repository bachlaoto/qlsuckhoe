/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import org.demo.controller.assembler.SucosuckhoeResourceAssembler;
import org.demo.controller.resource.SucosuckhoeResource;
import com.tlu.qlsuckhoe.entity.Sucosuckhoe;
import com.tlu.qlsuckhoe.service.SucosuckhoeServiceImpl;
import com.tlu.qlsuckhoe.service.criteria.SucosuckhoeCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/sucosuckhoe", produces = "application/hal+json")
public class SucosuckhoeController {

	private static final Logger LOGGER = LoggerFactory.getLogger(SucosuckhoeController.class);

	private static final String NOT_FOUND ="Sucosuckhoe not found";

	@Autowired
	private SucosuckhoeServiceImpl sucosuckhoeService;

	@Autowired
	private PagedResourcesAssembler<Sucosuckhoe> pageAssember;

	private SucosuckhoeResourceAssembler sucosuckhoeResourceAssembler = new SucosuckhoeResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<SucosuckhoeResource>> search(Pageable pageable, SucosuckhoeCriteria criteria) {
		LOGGER.info("Sucosuckhoes search [pageable={}|SucosuckhoeCriteria={}", pageable, criteria);
		final Page<Sucosuckhoe> result = sucosuckhoeService.search(pageable, criteria);
		LOGGER.info("Found {} sucosuckhoes !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, sucosuckhoeResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idsucosuckhoe}")
	public ResponseEntity<SucosuckhoeResource> get(@PathVariable("idsucosuckhoe") Integer idsucosuckhoe) {
		LOGGER.info("Sucosuckhoe get with id {}", resolveIdForLogger(idsucosuckhoe));
		final Sucosuckhoe sucosuckhoe = sucosuckhoeService.get(idsucosuckhoe);
		if (sucosuckhoe == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((SucosuckhoeResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Sucosuckhoe found : {}", sucosuckhoe);
		final SucosuckhoeResource sucosuckhoeResource = sucosuckhoeResourceAssembler.toResource(sucosuckhoe);
		return new ResponseEntity<>(sucosuckhoeResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<SucosuckhoeResource> create(@RequestBody Sucosuckhoe sucosuckhoe) {
		LOGGER.info("Sucosuckhoe creation request : {}", sucosuckhoe);
		if (sucosuckhoeService.exist(sucosuckhoe)) {
			LOGGER.info("Sucosuckhoe already exist ! : {}", sucosuckhoe);
			return new ResponseEntity<>((SucosuckhoeResource) null, HttpStatus.CONFLICT);
		} else {
			final Sucosuckhoe created = sucosuckhoeService.create(sucosuckhoe);
			LOGGER.info("Created sucosuckhoe {}", created);
			return new ResponseEntity<>(sucosuckhoeResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idsucosuckhoe}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idsucosuckhoe") Integer idsucosuckhoe, @RequestBody Sucosuckhoe sucosuckhoe) {
		LOGGER.info("Sucosuckhoe update request [id={} | sucosuckhoe={}}", resolveIdForLogger(idsucosuckhoe), sucosuckhoe);
		// force the id (use the id provided by the URL)
		sucosuckhoe.setIdsucosuckhoe(idsucosuckhoe);
		if (sucosuckhoeService.save(sucosuckhoe)) {
			LOGGER.info("Sucosuckhoe succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idsucosuckhoe}")
	public ResponseEntity<Void> delete(@PathVariable("idsucosuckhoe") Integer idsucosuckhoe) {
		LOGGER.info("Sucosuckhoe deletion request : {}", resolveIdForLogger(idsucosuckhoe));
		if (sucosuckhoeService.delete(idsucosuckhoe)) {
			LOGGER.info("Sucosuckhoe succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idsucosuckhoe) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idsucosuckhoe));
		return ids.toString();
	}

}
