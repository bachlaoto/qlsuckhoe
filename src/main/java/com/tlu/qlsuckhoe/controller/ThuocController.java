/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:43 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Thuoc;
import com.tlu.qlsuckhoe.service.ThuocServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/thuoc", produces = "application/hal+json")
public class ThuocController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ThuocController.class);

	private static final String NOT_FOUND ="Thuoc not found";

	@Autowired
	private ThuocServiceImpl thuocService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Thuoc> findAll() {
		List<Thuoc> list = thuocService.findAll();
		return list;
	}


	@GetMapping("{idthuoc}")
	public Thuoc get(@PathVariable("idthuoc") Integer idthuoc) {
		final Thuoc thuoc = thuocService.getOne(idthuoc);
		LOGGER.info("Thuoc found : {}", thuoc);
		return thuoc;
	}

	@PostMapping(consumes = "application/json")
	public Thuoc create(@RequestBody Thuoc thuoc) {
		LOGGER.info("Thuoc creation request : {}", thuoc);
		if (thuocService.exist(thuoc)) {
			LOGGER.info("Thuoc already exist ! : {}", thuoc);
			return null;
		} else {
			final Thuoc created = thuocService.create(thuoc);
			LOGGER.info("Created thuoc {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idthuoc}", consumes = "application/json")
	public Thuoc update(@PathVariable("idthuoc") Integer idthuoc, @RequestBody Thuoc thuoc) {
		return thuocService.update(thuoc);
	}

	@DeleteMapping("{idthuoc}")
	public void delete(@PathVariable("idthuoc") Integer idthuoc) {
		LOGGER.info("Thuoc deletion request : {}", resolveIdForLogger(idthuoc));
		if (thuocService.delete(idthuoc)) {
			LOGGER.info("Thuoc succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idthuoc) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idthuoc));
		return ids.toString();
	}

}

