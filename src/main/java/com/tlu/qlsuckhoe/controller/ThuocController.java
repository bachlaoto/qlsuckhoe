/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:57 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import org.demo.controller.assembler.ThuocResourceAssembler;
import org.demo.controller.resource.ThuocResource;
import com.tlu.qlsuckhoe.entity.Thuoc;
import com.tlu.qlsuckhoe.service.ThuocServiceImpl;
import com.tlu.qlsuckhoe.service.criteria.ThuocCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/thuoc", produces = "application/hal+json")
public class ThuocController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ThuocController.class);

	private static final String NOT_FOUND ="Thuoc not found";

	@Autowired
	private ThuocServiceImpl thuocService;

	@Autowired
	private PagedResourcesAssembler<Thuoc> pageAssember;

	private ThuocResourceAssembler thuocResourceAssembler = new ThuocResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<ThuocResource>> search(Pageable pageable, ThuocCriteria criteria) {
		LOGGER.info("Thuocs search [pageable={}|ThuocCriteria={}", pageable, criteria);
		final Page<Thuoc> result = thuocService.search(pageable, criteria);
		LOGGER.info("Found {} thuocs !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, thuocResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idthuoc}")
	public ResponseEntity<ThuocResource> get(@PathVariable("idthuoc") Integer idthuoc) {
		LOGGER.info("Thuoc get with id {}", resolveIdForLogger(idthuoc));
		final Thuoc thuoc = thuocService.get(idthuoc);
		if (thuoc == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((ThuocResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Thuoc found : {}", thuoc);
		final ThuocResource thuocResource = thuocResourceAssembler.toResource(thuoc);
		return new ResponseEntity<>(thuocResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<ThuocResource> create(@RequestBody Thuoc thuoc) {
		LOGGER.info("Thuoc creation request : {}", thuoc);
		if (thuocService.exist(thuoc)) {
			LOGGER.info("Thuoc already exist ! : {}", thuoc);
			return new ResponseEntity<>((ThuocResource) null, HttpStatus.CONFLICT);
		} else {
			final Thuoc created = thuocService.create(thuoc);
			LOGGER.info("Created thuoc {}", created);
			return new ResponseEntity<>(thuocResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idthuoc}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idthuoc") Integer idthuoc, @RequestBody Thuoc thuoc) {
		LOGGER.info("Thuoc update request [id={} | thuoc={}}", resolveIdForLogger(idthuoc), thuoc);
		// force the id (use the id provided by the URL)
		thuoc.setIdthuoc(idthuoc);
		if (thuocService.save(thuoc)) {
			LOGGER.info("Thuoc succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idthuoc}")
	public ResponseEntity<Void> delete(@PathVariable("idthuoc") Integer idthuoc) {
		LOGGER.info("Thuoc deletion request : {}", resolveIdForLogger(idthuoc));
		if (thuocService.delete(idthuoc)) {
			LOGGER.info("Thuoc succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idthuoc) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idthuoc));
		return ids.toString();
	}

}
