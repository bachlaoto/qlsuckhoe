/*
 * Created on 2018-10-01 ( Date ISO 2018-10-01 - Time 22:38:43 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import com.tlu.qlsuckhoe.entity.Tintuc;
import com.tlu.qlsuckhoe.service.TintucServiceImpl;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping(value = "/tintuc", produces = "application/hal+json")
public class TintucController {

	private static final Logger LOGGER = LoggerFactory.getLogger(TintucController.class);

	private static final String NOT_FOUND ="Tintuc not found";

	@Autowired
	private TintucServiceImpl tintucService;

	@RequestMapping(value = "/",
			produces = {MediaType.APPLICATION_JSON_VALUE})
	public List<Tintuc> findAll() {
		List<Tintuc> list = tintucService.findAll();
		return list;
	}


	@GetMapping("{idtintuc}")
	public Tintuc get(@PathVariable("idtintuc") Integer idtintuc) {
		final Tintuc tintuc = tintucService.getOne(idtintuc);
		LOGGER.info("Tintuc found : {}", tintuc);
		return tintuc;
	}

	@PostMapping(consumes = "application/json")
	public Tintuc create(@RequestBody Tintuc tintuc) {
		LOGGER.info("Tintuc creation request : {}", tintuc);
		if (tintucService.exist(tintuc)) {
			LOGGER.info("Tintuc already exist ! : {}", tintuc);
			return null;
		} else {
			final Tintuc created = tintucService.create(tintuc);
			LOGGER.info("Created tintuc {}", created);
			return created;
		}
	}

	@PutMapping(value = "{idtintuc}", consumes = "application/json")
	public Tintuc update(@PathVariable("idtintuc") Integer idtintuc, @RequestBody Tintuc tintuc) {
		return tintucService.update(tintuc);
	}

	@DeleteMapping("{idtintuc}")
	public void delete(@PathVariable("idtintuc") Integer idtintuc) {
		LOGGER.info("Tintuc deletion request : {}", resolveIdForLogger(idtintuc));
		if (tintucService.delete(idtintuc)) {
			LOGGER.info("Tintuc succesfully deleted");
		} else {
			LOGGER.info(NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idtintuc) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idtintuc));
		return ids.toString();
	}

}

