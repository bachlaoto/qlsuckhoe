/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:57 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller;

import org.demo.controller.assembler.YteResourceAssembler;
import org.demo.controller.resource.YteResource;
import com.tlu.qlsuckhoe.entity.Yte;
import com.tlu.qlsuckhoe.service.YteServiceImpl;
import com.tlu.qlsuckhoe.service.criteria.YteCriteria;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.web.PagedResourcesAssembler;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Rest controller which produce Hal+json content (including hateoas metadata).
 * @author Telosys (http://www.telosys.org/) version 3.0.0
 */
@RestController
@RequestMapping(value = "/yte", produces = "application/hal+json")
public class YteController {

	private static final Logger LOGGER = LoggerFactory.getLogger(YteController.class);

	private static final String NOT_FOUND ="Yte not found";

	@Autowired
	private YteServiceImpl yteService;

	@Autowired
	private PagedResourcesAssembler<Yte> pageAssember;

	private YteResourceAssembler yteResourceAssembler = new YteResourceAssembler();

	@GetMapping
	public ResponseEntity<PagedResources<YteResource>> search(Pageable pageable, YteCriteria criteria) {
		LOGGER.info("Ytes search [pageable={}|YteCriteria={}", pageable, criteria);
		final Page<Yte> result = yteService.search(pageable, criteria);
		LOGGER.info("Found {} ytes !", result.getSize());
		return new ResponseEntity<>(pageAssember.toResource(result, yteResourceAssembler), HttpStatus.OK);
	}

	@GetMapping("{idyte}")
	public ResponseEntity<YteResource> get(@PathVariable("idyte") Integer idyte) {
		LOGGER.info("Yte get with id {}", resolveIdForLogger(idyte));
		final Yte yte = yteService.get(idyte);
		if (yte == null) {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>((YteResource) null, HttpStatus.NOT_FOUND);
		}
		LOGGER.info("Yte found : {}", yte);
		final YteResource yteResource = yteResourceAssembler.toResource(yte);
		return new ResponseEntity<>(yteResource, HttpStatus.OK);
	}

	@PostMapping(consumes = "application/json")
	public ResponseEntity<YteResource> create(@RequestBody Yte yte) {
		LOGGER.info("Yte creation request : {}", yte);
		if (yteService.exist(yte)) {
			LOGGER.info("Yte already exist ! : {}", yte);
			return new ResponseEntity<>((YteResource) null, HttpStatus.CONFLICT);
		} else {
			final Yte created = yteService.create(yte);
			LOGGER.info("Created yte {}", created);
			return new ResponseEntity<>(yteResourceAssembler.toResource(created), HttpStatus.OK);
		}
	}

	@PutMapping(value = "{idyte}", consumes = "application/json")
	public ResponseEntity<Void> update(@PathVariable("idyte") Integer idyte, @RequestBody Yte yte) {
		LOGGER.info("Yte update request [id={} | yte={}}", resolveIdForLogger(idyte), yte);
		// force the id (use the id provided by the URL)
		yte.setIdyte(idyte);
		if (yteService.save(yte)) {
			LOGGER.info("Yte succesfully updated");
			return new ResponseEntity<>(HttpStatus.OK);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	@DeleteMapping("{idyte}")
	public ResponseEntity<Void> delete(@PathVariable("idyte") Integer idyte) {
		LOGGER.info("Yte deletion request : {}", resolveIdForLogger(idyte));
		if (yteService.delete(idyte)) {
			LOGGER.info("Yte succesfully deleted");
			return new ResponseEntity<>(HttpStatus.NO_CONTENT);
		} else {
			LOGGER.info(NOT_FOUND);
			return new ResponseEntity<>(HttpStatus.NOT_FOUND);
		}
	}

	private String resolveIdForLogger(Integer idyte) {
		final StringBuilder ids = new StringBuilder();
		ids.append(String.valueOf(idyte));
		return ids.toString();
	}

}
