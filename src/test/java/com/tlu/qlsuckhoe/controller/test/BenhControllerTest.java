/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:54 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.BenhResource;
import com.tlu.qlsuckhoe.entity.Benh;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class BenhControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final Integer IDDANHMUC = Integer.valueOf(100);

	private static final String TENBENH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String TRIEUCHUNG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String CACHCHUA = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	@Test
	public void createBenhTest() {
		// Create an benh
		Benh benh = createMocKBenh(Integer.valueOf(100) , IDDANHMUC, TENBENH, TRIEUCHUNG, CACHCHUA);
		// Recover this benh
		ResponseEntity<BenhResource> result = this.restTemplate.getForEntity("/benh/1", BenhResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/benh/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getIddanhmuc()).isEqualTo(IDDANHMUC);
		assertThat(result.getBody().getTenbenh()).isEqualTo(TENBENH);
		assertThat(result.getBody().getTrieuchung()).isEqualTo(TRIEUCHUNG);
		assertThat(result.getBody().getCachchua()).isEqualTo(CACHCHUA);
		// Try to create the same benh, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/benh", benh, BenhResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an benh and assert field
		Benh benh = createMocKBenh(Integer.valueOf(100)  , IDDANHMUC, TENBENH, TRIEUCHUNG, CACHCHUA);
		// Recover this benh
		ResponseEntity<BenhResource> result = this.restTemplate.getForEntity("/benh/1", BenhResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/benh/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getIddanhmuc()).isEqualTo(IDDANHMUC);
		assertThat(result.getBody().getTenbenh()).isEqualTo(TENBENH);
		assertThat(result.getBody().getTrieuchung()).isEqualTo(TRIEUCHUNG);
		assertThat(result.getBody().getCachchua()).isEqualTo(CACHCHUA);

		// Change field value

		benh.setIddanhmuc(Integer.valueOf(200));

		benh.setTenbenh("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		benh.setTrieuchung("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		benh.setCachchua("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
		// Process update
		RequestEntity<Benh> request = new RequestEntity<Benh>(benh, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/benh/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the benh and ensure field are correct
		result = this.restTemplate.getForEntity("/benh/1", BenhResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/benh/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);

		assertThat(result.getBody().getIddanhmuc()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getTenbenh()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getTrieuchung()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getCachchua()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Benh> request = new RequestEntity<Benh>(new Benh(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/benh/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an benh
		createMocKBenh(Integer.valueOf(100)  , IDDANHMUC, TENBENH, TRIEUCHUNG, CACHCHUA);
		// Recover this benh and test if all is ok
		ResponseEntity<BenhResource> result = this.restTemplate.getForEntity("/benh/1", BenhResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the benh
		RequestEntity<Benh> request = new RequestEntity<Benh>(new Benh(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/benh/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the benh and ensure it's don't exist
		// Recover this benh and test if all is ok
		result = this.restTemplate.getForEntity("/benh/1", BenhResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the benh
		RequestEntity<Benh> request = new RequestEntity<Benh>(new Benh(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/benh/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getBenhsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<BenhResource>> result = this.search("/benh");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<BenhResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 benh
		for (int i = 1; i < 22; i++) {
			createMocKBenh(new Integer((int)i),IDDANHMUC + i,String.valueOf(i),String.valueOf(i),String.valueOf(i));
		}
		result = this.search("/benh");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/benh?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getBenhsTestFilter() {
		// Create an benh
		Benh benh = createMocKBenh(Integer.valueOf(100) , IDDANHMUC, TENBENH, TRIEUCHUNG, CACHCHUA);
		RequestEntity<Benh> request = null;
		ResponseEntity<PagedResources<BenhResource>> result = null;
		PagedResources<BenhResource> page = null;
		// Test tenbenh filter
		// Set the value on entity and update
		benh.setTenbenh("c");
		// Process update
		request = new RequestEntity<Benh>(benh, HttpMethod.PUT, null);
		this.restTemplate.exchange("/benh/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test tenbenh filter
		result = this.search("/benh?size=20&tenbenh=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BenhResource benhResource : page.getContent()) {
			assertThat(benhResource.getTenbenh()).startsWith("c");
		}
		// Test trieuchung filter
		// Set the value on entity and update
		benh.setTrieuchung("c");
		// Process update
		request = new RequestEntity<Benh>(benh, HttpMethod.PUT, null);
		this.restTemplate.exchange("/benh/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test trieuchung filter
		result = this.search("/benh?size=20&trieuchung=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BenhResource benhResource : page.getContent()) {
			assertThat(benhResource.getTrieuchung()).startsWith("c");
		}
		// Test cachchua filter
		// Set the value on entity and update
		benh.setCachchua("c");
		// Process update
		request = new RequestEntity<Benh>(benh, HttpMethod.PUT, null);
		this.restTemplate.exchange("/benh/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test cachchua filter
		result = this.search("/benh?size=20&cachchua=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (BenhResource benhResource : page.getContent()) {
			assertThat(benhResource.getCachchua()).startsWith("c");
		}
	}

	private Benh createMocKBenh(Integer idbenh, Integer iddanhmuc, String tenbenh, String trieuchung, String cachchua) {
		Benh benhMock = new Benh();
		benhMock.setIdbenh(idbenh);
		benhMock.setIddanhmuc(iddanhmuc);
		benhMock.setTenbenh(tenbenh);
		benhMock.setTrieuchung(trieuchung);
		benhMock.setCachchua(cachchua);
		this.restTemplate.postForLocation("/benh", benhMock);
		return benhMock;
	}

	private ResponseEntity<PagedResources<BenhResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<BenhResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<BenhResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}