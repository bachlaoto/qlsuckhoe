/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:55 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.LoaithuocResource;
import com.tlu.qlsuckhoe.entity.Loaithuoc;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class LoaithuocControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final String TENLOAI = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	@Test
	public void createLoaithuocTest() {
		// Create an loaithuoc
		Loaithuoc loaithuoc = createMocKLoaithuoc(Integer.valueOf(100) , TENLOAI);
		// Recover this loaithuoc
		ResponseEntity<LoaithuocResource> result = this.restTemplate.getForEntity("/loaithuoc/1", LoaithuocResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/loaithuoc/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getTenloai()).isEqualTo(TENLOAI);
		// Try to create the same loaithuoc, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/loaithuoc", loaithuoc, LoaithuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an loaithuoc and assert field
		Loaithuoc loaithuoc = createMocKLoaithuoc(Integer.valueOf(100)  , TENLOAI);
		// Recover this loaithuoc
		ResponseEntity<LoaithuocResource> result = this.restTemplate.getForEntity("/loaithuoc/1", LoaithuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/loaithuoc/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getTenloai()).isEqualTo(TENLOAI);

		// Change field value

		loaithuoc.setTenloai("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
		// Process update
		RequestEntity<Loaithuoc> request = new RequestEntity<Loaithuoc>(loaithuoc, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/loaithuoc/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the loaithuoc and ensure field are correct
		result = this.restTemplate.getForEntity("/loaithuoc/1", LoaithuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/loaithuoc/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);

		assertThat(result.getBody().getTenloai()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Loaithuoc> request = new RequestEntity<Loaithuoc>(new Loaithuoc(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/loaithuoc/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an loaithuoc
		createMocKLoaithuoc(Integer.valueOf(100)  , TENLOAI);
		// Recover this loaithuoc and test if all is ok
		ResponseEntity<LoaithuocResource> result = this.restTemplate.getForEntity("/loaithuoc/1", LoaithuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the loaithuoc
		RequestEntity<Loaithuoc> request = new RequestEntity<Loaithuoc>(new Loaithuoc(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/loaithuoc/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the loaithuoc and ensure it's don't exist
		// Recover this loaithuoc and test if all is ok
		result = this.restTemplate.getForEntity("/loaithuoc/1", LoaithuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the loaithuoc
		RequestEntity<Loaithuoc> request = new RequestEntity<Loaithuoc>(new Loaithuoc(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/loaithuoc/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getLoaithuocsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<LoaithuocResource>> result = this.search("/loaithuoc");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<LoaithuocResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 loaithuoc
		for (int i = 1; i < 22; i++) {
			createMocKLoaithuoc(new Integer((int)i),String.valueOf(i));
		}
		result = this.search("/loaithuoc");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/loaithuoc?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getLoaithuocsTestFilter() {
		// Create an loaithuoc
		Loaithuoc loaithuoc = createMocKLoaithuoc(Integer.valueOf(100) , TENLOAI);
		RequestEntity<Loaithuoc> request = null;
		ResponseEntity<PagedResources<LoaithuocResource>> result = null;
		PagedResources<LoaithuocResource> page = null;
		// Test tenloai filter
		// Set the value on entity and update
		loaithuoc.setTenloai("c");
		// Process update
		request = new RequestEntity<Loaithuoc>(loaithuoc, HttpMethod.PUT, null);
		this.restTemplate.exchange("/loaithuoc/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test tenloai filter
		result = this.search("/loaithuoc?size=20&tenloai=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (LoaithuocResource loaithuocResource : page.getContent()) {
			assertThat(loaithuocResource.getTenloai()).startsWith("c");
		}
	}

	private Loaithuoc createMocKLoaithuoc(Integer idloaithuoc, String tenloai) {
		Loaithuoc loaithuocMock = new Loaithuoc();
		loaithuocMock.setIdloaithuoc(idloaithuoc);
		loaithuocMock.setTenloai(tenloai);
		this.restTemplate.postForLocation("/loaithuoc", loaithuocMock);
		return loaithuocMock;
	}

	private ResponseEntity<PagedResources<LoaithuocResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<LoaithuocResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<LoaithuocResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}