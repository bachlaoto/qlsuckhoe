/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.SinhvienResource;
import com.tlu.qlsuckhoe.entity.Sinhvien;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class SinhvienControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final String HOTEN = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String GIOITINH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String NAMSINH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String SOCMT = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String DIACHI = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String CHUYENNGANH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String KHOA = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String MASV = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String MATKHAU = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final Integer IDROLE = Integer.valueOf(100);

	@Test
	public void createSinhvienTest() {
		// Create an sinhvien
		Sinhvien sinhvien = createMocKSinhvien(Integer.valueOf(100) , HOTEN, GIOITINH, NAMSINH, SOCMT, DIACHI, CHUYENNGANH, KHOA, MASV, MATKHAU, IDROLE);
		// Recover this sinhvien
		ResponseEntity<SinhvienResource> result = this.restTemplate.getForEntity("/sinhvien/1", SinhvienResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/sinhvien/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getHoten()).isEqualTo(HOTEN);
		assertThat(result.getBody().getGioitinh()).isEqualTo(GIOITINH);
		assertThat(result.getBody().getNamsinh()).isEqualTo(NAMSINH);
		assertThat(result.getBody().getSocmt()).isEqualTo(SOCMT);
		assertThat(result.getBody().getDiachi()).isEqualTo(DIACHI);
		assertThat(result.getBody().getChuyennganh()).isEqualTo(CHUYENNGANH);
		assertThat(result.getBody().getKhoa()).isEqualTo(KHOA);
		assertThat(result.getBody().getMasv()).isEqualTo(MASV);
		assertThat(result.getBody().getMatkhau()).isEqualTo(MATKHAU);
		assertThat(result.getBody().getIdrole()).isEqualTo(IDROLE);
		// Try to create the same sinhvien, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/sinhvien", sinhvien, SinhvienResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an sinhvien and assert field
		Sinhvien sinhvien = createMocKSinhvien(Integer.valueOf(100)  , HOTEN, GIOITINH, NAMSINH, SOCMT, DIACHI, CHUYENNGANH, KHOA, MASV, MATKHAU, IDROLE);
		// Recover this sinhvien
		ResponseEntity<SinhvienResource> result = this.restTemplate.getForEntity("/sinhvien/1", SinhvienResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/sinhvien/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getHoten()).isEqualTo(HOTEN);
		assertThat(result.getBody().getGioitinh()).isEqualTo(GIOITINH);
		assertThat(result.getBody().getNamsinh()).isEqualTo(NAMSINH);
		assertThat(result.getBody().getSocmt()).isEqualTo(SOCMT);
		assertThat(result.getBody().getDiachi()).isEqualTo(DIACHI);
		assertThat(result.getBody().getChuyennganh()).isEqualTo(CHUYENNGANH);
		assertThat(result.getBody().getKhoa()).isEqualTo(KHOA);
		assertThat(result.getBody().getMasv()).isEqualTo(MASV);
		assertThat(result.getBody().getMatkhau()).isEqualTo(MATKHAU);
		assertThat(result.getBody().getIdrole()).isEqualTo(IDROLE);

		// Change field value

		sinhvien.setHoten("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setGioitinh("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setNamsinh("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setSocmt("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setDiachi("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setChuyennganh("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setKhoa("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setMasv("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setMatkhau("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sinhvien.setIdrole(Integer.valueOf(200));
		// Process update
		RequestEntity<Sinhvien> request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the sinhvien and ensure field are correct
		result = this.restTemplate.getForEntity("/sinhvien/1", SinhvienResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/sinhvien/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);

		assertThat(result.getBody().getHoten()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getGioitinh()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getNamsinh()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getSocmt()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getDiachi()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getChuyennganh()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getKhoa()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getMasv()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getMatkhau()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getIdrole()).isEqualTo(Integer.valueOf(200));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Sinhvien> request = new RequestEntity<Sinhvien>(new Sinhvien(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/sinhvien/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an sinhvien
		createMocKSinhvien(Integer.valueOf(100)  , HOTEN, GIOITINH, NAMSINH, SOCMT, DIACHI, CHUYENNGANH, KHOA, MASV, MATKHAU, IDROLE);
		// Recover this sinhvien and test if all is ok
		ResponseEntity<SinhvienResource> result = this.restTemplate.getForEntity("/sinhvien/1", SinhvienResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the sinhvien
		RequestEntity<Sinhvien> request = new RequestEntity<Sinhvien>(new Sinhvien(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/sinhvien/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the sinhvien and ensure it's don't exist
		// Recover this sinhvien and test if all is ok
		result = this.restTemplate.getForEntity("/sinhvien/1", SinhvienResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the sinhvien
		RequestEntity<Sinhvien> request = new RequestEntity<Sinhvien>(new Sinhvien(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/sinhvien/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getSinhviensTest() {
		// First call assert no element
		ResponseEntity<PagedResources<SinhvienResource>> result = this.search("/sinhvien");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<SinhvienResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 sinhvien
		for (int i = 1; i < 22; i++) {
			createMocKSinhvien(new Integer((int)i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),IDROLE + i);
		}
		result = this.search("/sinhvien");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/sinhvien?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getSinhviensTestFilter() {
		// Create an sinhvien
		Sinhvien sinhvien = createMocKSinhvien(Integer.valueOf(100) , HOTEN, GIOITINH, NAMSINH, SOCMT, DIACHI, CHUYENNGANH, KHOA, MASV, MATKHAU, IDROLE);
		RequestEntity<Sinhvien> request = null;
		ResponseEntity<PagedResources<SinhvienResource>> result = null;
		PagedResources<SinhvienResource> page = null;
		// Test hoten filter
		// Set the value on entity and update
		sinhvien.setHoten("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test hoten filter
		result = this.search("/sinhvien?size=20&hoten=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getHoten()).startsWith("c");
		}
		// Test gioitinh filter
		// Set the value on entity and update
		sinhvien.setGioitinh("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test gioitinh filter
		result = this.search("/sinhvien?size=20&gioitinh=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getGioitinh()).startsWith("c");
		}
		// Test namsinh filter
		// Set the value on entity and update
		sinhvien.setNamsinh("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test namsinh filter
		result = this.search("/sinhvien?size=20&namsinh=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getNamsinh()).startsWith("c");
		}
		// Test socmt filter
		// Set the value on entity and update
		sinhvien.setSocmt("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test socmt filter
		result = this.search("/sinhvien?size=20&socmt=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getSocmt()).startsWith("c");
		}
		// Test diachi filter
		// Set the value on entity and update
		sinhvien.setDiachi("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test diachi filter
		result = this.search("/sinhvien?size=20&diachi=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getDiachi()).startsWith("c");
		}
		// Test chuyennganh filter
		// Set the value on entity and update
		sinhvien.setChuyennganh("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test chuyennganh filter
		result = this.search("/sinhvien?size=20&chuyennganh=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getChuyennganh()).startsWith("c");
		}
		// Test khoa filter
		// Set the value on entity and update
		sinhvien.setKhoa("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test khoa filter
		result = this.search("/sinhvien?size=20&khoa=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getKhoa()).startsWith("c");
		}
		// Test masv filter
		// Set the value on entity and update
		sinhvien.setMasv("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test masv filter
		result = this.search("/sinhvien?size=20&masv=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getMasv()).startsWith("c");
		}
		// Test matkhau filter
		// Set the value on entity and update
		sinhvien.setMatkhau("c");
		// Process update
		request = new RequestEntity<Sinhvien>(sinhvien, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sinhvien/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test matkhau filter
		result = this.search("/sinhvien?size=20&matkhau=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SinhvienResource sinhvienResource : page.getContent()) {
			assertThat(sinhvienResource.getMatkhau()).startsWith("c");
		}
	}

	private Sinhvien createMocKSinhvien(Integer idsinhvien, String hoten, String gioitinh, String namsinh, String socmt, String diachi, String chuyennganh, String khoa, String masv, String matkhau, Integer idrole) {
		Sinhvien sinhvienMock = new Sinhvien();
		sinhvienMock.setIdsinhvien(idsinhvien);
		sinhvienMock.setHoten(hoten);
		sinhvienMock.setGioitinh(gioitinh);
		sinhvienMock.setNamsinh(namsinh);
		sinhvienMock.setSocmt(socmt);
		sinhvienMock.setDiachi(diachi);
		sinhvienMock.setChuyennganh(chuyennganh);
		sinhvienMock.setKhoa(khoa);
		sinhvienMock.setMasv(masv);
		sinhvienMock.setMatkhau(matkhau);
		sinhvienMock.setIdrole(idrole);
		this.restTemplate.postForLocation("/sinhvien", sinhvienMock);
		return sinhvienMock;
	}

	private ResponseEntity<PagedResources<SinhvienResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<SinhvienResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<SinhvienResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}