/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:56 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.SucosuckhoeResource;
import com.tlu.qlsuckhoe.entity.Sucosuckhoe;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class SucosuckhoeControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final Integer IDSINHVIEN = Integer.valueOf(100);

	private static final String NGAY = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String LOAISUCO = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String BIENPHAP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String MUCDO = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String NGUOIXULY = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final Integer IDTHUOC = Integer.valueOf(100);

	private static final Integer IDTHIETBIYTE = Integer.valueOf(100);

	@Test
	public void createSucosuckhoeTest() {
		// Create an sucosuckhoe
		Sucosuckhoe sucosuckhoe = createMocKSucosuckhoe(Integer.valueOf(100) , IDSINHVIEN, NGAY, LOAISUCO, BIENPHAP, MUCDO, NGUOIXULY, IDTHUOC, IDTHIETBIYTE);
		// Recover this sucosuckhoe
		ResponseEntity<SucosuckhoeResource> result = this.restTemplate.getForEntity("/sucosuckhoe/1", SucosuckhoeResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/sucosuckhoe/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getIdsinhvien()).isEqualTo(IDSINHVIEN);
		assertThat(result.getBody().getNgay()).isEqualTo(NGAY);
		assertThat(result.getBody().getLoaisuco()).isEqualTo(LOAISUCO);
		assertThat(result.getBody().getBienphap()).isEqualTo(BIENPHAP);
		assertThat(result.getBody().getMucdo()).isEqualTo(MUCDO);
		assertThat(result.getBody().getNguoixuly()).isEqualTo(NGUOIXULY);
		assertThat(result.getBody().getIdthuoc()).isEqualTo(IDTHUOC);
		assertThat(result.getBody().getIdthietbiyte()).isEqualTo(IDTHIETBIYTE);
		// Try to create the same sucosuckhoe, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/sucosuckhoe", sucosuckhoe, SucosuckhoeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an sucosuckhoe and assert field
		Sucosuckhoe sucosuckhoe = createMocKSucosuckhoe(Integer.valueOf(100)  , IDSINHVIEN, NGAY, LOAISUCO, BIENPHAP, MUCDO, NGUOIXULY, IDTHUOC, IDTHIETBIYTE);
		// Recover this sucosuckhoe
		ResponseEntity<SucosuckhoeResource> result = this.restTemplate.getForEntity("/sucosuckhoe/1", SucosuckhoeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/sucosuckhoe/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getIdsinhvien()).isEqualTo(IDSINHVIEN);
		assertThat(result.getBody().getNgay()).isEqualTo(NGAY);
		assertThat(result.getBody().getLoaisuco()).isEqualTo(LOAISUCO);
		assertThat(result.getBody().getBienphap()).isEqualTo(BIENPHAP);
		assertThat(result.getBody().getMucdo()).isEqualTo(MUCDO);
		assertThat(result.getBody().getNguoixuly()).isEqualTo(NGUOIXULY);
		assertThat(result.getBody().getIdthuoc()).isEqualTo(IDTHUOC);
		assertThat(result.getBody().getIdthietbiyte()).isEqualTo(IDTHIETBIYTE);

		// Change field value

		sucosuckhoe.setIdsinhvien(Integer.valueOf(200));

		sucosuckhoe.setNgay("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sucosuckhoe.setLoaisuco("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sucosuckhoe.setBienphap("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sucosuckhoe.setMucdo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sucosuckhoe.setNguoixuly("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		sucosuckhoe.setIdthuoc(Integer.valueOf(200));

		sucosuckhoe.setIdthietbiyte(Integer.valueOf(200));
		// Process update
		RequestEntity<Sucosuckhoe> request = new RequestEntity<Sucosuckhoe>(sucosuckhoe, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the sucosuckhoe and ensure field are correct
		result = this.restTemplate.getForEntity("/sucosuckhoe/1", SucosuckhoeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/sucosuckhoe/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);

		assertThat(result.getBody().getIdsinhvien()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getNgay()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getLoaisuco()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getBienphap()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getMucdo()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getNguoixuly()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getIdthuoc()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getIdthietbiyte()).isEqualTo(Integer.valueOf(200));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Sucosuckhoe> request = new RequestEntity<Sucosuckhoe>(new Sucosuckhoe(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/sucosuckhoe/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an sucosuckhoe
		createMocKSucosuckhoe(Integer.valueOf(100)  , IDSINHVIEN, NGAY, LOAISUCO, BIENPHAP, MUCDO, NGUOIXULY, IDTHUOC, IDTHIETBIYTE);
		// Recover this sucosuckhoe and test if all is ok
		ResponseEntity<SucosuckhoeResource> result = this.restTemplate.getForEntity("/sucosuckhoe/1", SucosuckhoeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the sucosuckhoe
		RequestEntity<Sucosuckhoe> request = new RequestEntity<Sucosuckhoe>(new Sucosuckhoe(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the sucosuckhoe and ensure it's don't exist
		// Recover this sucosuckhoe and test if all is ok
		result = this.restTemplate.getForEntity("/sucosuckhoe/1", SucosuckhoeResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the sucosuckhoe
		RequestEntity<Sucosuckhoe> request = new RequestEntity<Sucosuckhoe>(new Sucosuckhoe(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/sucosuckhoe/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getSucosuckhoesTest() {
		// First call assert no element
		ResponseEntity<PagedResources<SucosuckhoeResource>> result = this.search("/sucosuckhoe");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<SucosuckhoeResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 sucosuckhoe
		for (int i = 1; i < 22; i++) {
			createMocKSucosuckhoe(new Integer((int)i),IDSINHVIEN + i,String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),IDTHUOC + i,IDTHIETBIYTE + i);
		}
		result = this.search("/sucosuckhoe");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/sucosuckhoe?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getSucosuckhoesTestFilter() {
		// Create an sucosuckhoe
		Sucosuckhoe sucosuckhoe = createMocKSucosuckhoe(Integer.valueOf(100) , IDSINHVIEN, NGAY, LOAISUCO, BIENPHAP, MUCDO, NGUOIXULY, IDTHUOC, IDTHIETBIYTE);
		RequestEntity<Sucosuckhoe> request = null;
		ResponseEntity<PagedResources<SucosuckhoeResource>> result = null;
		PagedResources<SucosuckhoeResource> page = null;
		// Test ngay filter
		// Set the value on entity and update
		sucosuckhoe.setNgay("c");
		// Process update
		request = new RequestEntity<Sucosuckhoe>(sucosuckhoe, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test ngay filter
		result = this.search("/sucosuckhoe?size=20&ngay=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SucosuckhoeResource sucosuckhoeResource : page.getContent()) {
			assertThat(sucosuckhoeResource.getNgay()).startsWith("c");
		}
		// Test loaisuco filter
		// Set the value on entity and update
		sucosuckhoe.setLoaisuco("c");
		// Process update
		request = new RequestEntity<Sucosuckhoe>(sucosuckhoe, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test loaisuco filter
		result = this.search("/sucosuckhoe?size=20&loaisuco=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SucosuckhoeResource sucosuckhoeResource : page.getContent()) {
			assertThat(sucosuckhoeResource.getLoaisuco()).startsWith("c");
		}
		// Test bienphap filter
		// Set the value on entity and update
		sucosuckhoe.setBienphap("c");
		// Process update
		request = new RequestEntity<Sucosuckhoe>(sucosuckhoe, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test bienphap filter
		result = this.search("/sucosuckhoe?size=20&bienphap=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SucosuckhoeResource sucosuckhoeResource : page.getContent()) {
			assertThat(sucosuckhoeResource.getBienphap()).startsWith("c");
		}
		// Test mucdo filter
		// Set the value on entity and update
		sucosuckhoe.setMucdo("c");
		// Process update
		request = new RequestEntity<Sucosuckhoe>(sucosuckhoe, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test mucdo filter
		result = this.search("/sucosuckhoe?size=20&mucdo=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SucosuckhoeResource sucosuckhoeResource : page.getContent()) {
			assertThat(sucosuckhoeResource.getMucdo()).startsWith("c");
		}
		// Test nguoixuly filter
		// Set the value on entity and update
		sucosuckhoe.setNguoixuly("c");
		// Process update
		request = new RequestEntity<Sucosuckhoe>(sucosuckhoe, HttpMethod.PUT, null);
		this.restTemplate.exchange("/sucosuckhoe/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test nguoixuly filter
		result = this.search("/sucosuckhoe?size=20&nguoixuly=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (SucosuckhoeResource sucosuckhoeResource : page.getContent()) {
			assertThat(sucosuckhoeResource.getNguoixuly()).startsWith("c");
		}
	}

	private Sucosuckhoe createMocKSucosuckhoe(Integer idsucosuckhoe, Integer idsinhvien, String ngay, String loaisuco, String bienphap, String mucdo, String nguoixuly, Integer idthuoc, Integer idthietbiyte) {
		Sucosuckhoe sucosuckhoeMock = new Sucosuckhoe();
		sucosuckhoeMock.setIdsucosuckhoe(idsucosuckhoe);
		sucosuckhoeMock.setIdsinhvien(idsinhvien);
		sucosuckhoeMock.setNgay(ngay);
		sucosuckhoeMock.setLoaisuco(loaisuco);
		sucosuckhoeMock.setBienphap(bienphap);
		sucosuckhoeMock.setMucdo(mucdo);
		sucosuckhoeMock.setNguoixuly(nguoixuly);
		sucosuckhoeMock.setIdthuoc(idthuoc);
		sucosuckhoeMock.setIdthietbiyte(idthietbiyte);
		this.restTemplate.postForLocation("/sucosuckhoe", sucosuckhoeMock);
		return sucosuckhoeMock;
	}

	private ResponseEntity<PagedResources<SucosuckhoeResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<SucosuckhoeResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<SucosuckhoeResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}