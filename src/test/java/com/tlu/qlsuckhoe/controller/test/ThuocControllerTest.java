/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:57 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.ThuocResource;
import com.tlu.qlsuckhoe.entity.Thuoc;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class ThuocControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final Integer IDLOAITHUOC = Integer.valueOf(100);

	private static final Integer IDNHASANXUAT = Integer.valueOf(100);

	private static final String TENTHUOC = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String TACDUNG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String CACHDUNG = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String NGAYNHAP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final Integer SOLUONG = Integer.valueOf(100);

	@Test
	public void createThuocTest() {
		// Create an thuoc
		Thuoc thuoc = createMocKThuoc(Integer.valueOf(100) , IDLOAITHUOC, IDNHASANXUAT, TENTHUOC, TACDUNG, CACHDUNG, NGAYNHAP, SOLUONG);
		// Recover this thuoc
		ResponseEntity<ThuocResource> result = this.restTemplate.getForEntity("/thuoc/1", ThuocResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/thuoc/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getIdloaithuoc()).isEqualTo(IDLOAITHUOC);
		assertThat(result.getBody().getIdnhasanxuat()).isEqualTo(IDNHASANXUAT);
		assertThat(result.getBody().getTenthuoc()).isEqualTo(TENTHUOC);
		assertThat(result.getBody().getTacdung()).isEqualTo(TACDUNG);
		assertThat(result.getBody().getCachdung()).isEqualTo(CACHDUNG);
		assertThat(result.getBody().getNgaynhap()).isEqualTo(NGAYNHAP);
		assertThat(result.getBody().getSoluong()).isEqualTo(SOLUONG);
		// Try to create the same thuoc, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/thuoc", thuoc, ThuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an thuoc and assert field
		Thuoc thuoc = createMocKThuoc(Integer.valueOf(100)  , IDLOAITHUOC, IDNHASANXUAT, TENTHUOC, TACDUNG, CACHDUNG, NGAYNHAP, SOLUONG);
		// Recover this thuoc
		ResponseEntity<ThuocResource> result = this.restTemplate.getForEntity("/thuoc/1", ThuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/thuoc/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getIdloaithuoc()).isEqualTo(IDLOAITHUOC);
		assertThat(result.getBody().getIdnhasanxuat()).isEqualTo(IDNHASANXUAT);
		assertThat(result.getBody().getTenthuoc()).isEqualTo(TENTHUOC);
		assertThat(result.getBody().getTacdung()).isEqualTo(TACDUNG);
		assertThat(result.getBody().getCachdung()).isEqualTo(CACHDUNG);
		assertThat(result.getBody().getNgaynhap()).isEqualTo(NGAYNHAP);
		assertThat(result.getBody().getSoluong()).isEqualTo(SOLUONG);

		// Change field value

		thuoc.setIdloaithuoc(Integer.valueOf(200));

		thuoc.setIdnhasanxuat(Integer.valueOf(200));

		thuoc.setTenthuoc("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		thuoc.setTacdung("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		thuoc.setCachdung("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		thuoc.setNgaynhap("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		thuoc.setSoluong(Integer.valueOf(200));
		// Process update
		RequestEntity<Thuoc> request = new RequestEntity<Thuoc>(thuoc, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/thuoc/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the thuoc and ensure field are correct
		result = this.restTemplate.getForEntity("/thuoc/1", ThuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/thuoc/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);

		assertThat(result.getBody().getIdloaithuoc()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getIdnhasanxuat()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getTenthuoc()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getTacdung()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getCachdung()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getNgaynhap()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getSoluong()).isEqualTo(Integer.valueOf(200));
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Thuoc> request = new RequestEntity<Thuoc>(new Thuoc(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/thuoc/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an thuoc
		createMocKThuoc(Integer.valueOf(100)  , IDLOAITHUOC, IDNHASANXUAT, TENTHUOC, TACDUNG, CACHDUNG, NGAYNHAP, SOLUONG);
		// Recover this thuoc and test if all is ok
		ResponseEntity<ThuocResource> result = this.restTemplate.getForEntity("/thuoc/1", ThuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the thuoc
		RequestEntity<Thuoc> request = new RequestEntity<Thuoc>(new Thuoc(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/thuoc/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the thuoc and ensure it's don't exist
		// Recover this thuoc and test if all is ok
		result = this.restTemplate.getForEntity("/thuoc/1", ThuocResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the thuoc
		RequestEntity<Thuoc> request = new RequestEntity<Thuoc>(new Thuoc(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/thuoc/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getThuocsTest() {
		// First call assert no element
		ResponseEntity<PagedResources<ThuocResource>> result = this.search("/thuoc");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<ThuocResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 thuoc
		for (int i = 1; i < 22; i++) {
			createMocKThuoc(new Integer((int)i),IDLOAITHUOC + i,IDNHASANXUAT + i,String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),SOLUONG + i);
		}
		result = this.search("/thuoc");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/thuoc?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getThuocsTestFilter() {
		// Create an thuoc
		Thuoc thuoc = createMocKThuoc(Integer.valueOf(100) , IDLOAITHUOC, IDNHASANXUAT, TENTHUOC, TACDUNG, CACHDUNG, NGAYNHAP, SOLUONG);
		RequestEntity<Thuoc> request = null;
		ResponseEntity<PagedResources<ThuocResource>> result = null;
		PagedResources<ThuocResource> page = null;
		// Test tenthuoc filter
		// Set the value on entity and update
		thuoc.setTenthuoc("c");
		// Process update
		request = new RequestEntity<Thuoc>(thuoc, HttpMethod.PUT, null);
		this.restTemplate.exchange("/thuoc/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test tenthuoc filter
		result = this.search("/thuoc?size=20&tenthuoc=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ThuocResource thuocResource : page.getContent()) {
			assertThat(thuocResource.getTenthuoc()).startsWith("c");
		}
		// Test tacdung filter
		// Set the value on entity and update
		thuoc.setTacdung("c");
		// Process update
		request = new RequestEntity<Thuoc>(thuoc, HttpMethod.PUT, null);
		this.restTemplate.exchange("/thuoc/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test tacdung filter
		result = this.search("/thuoc?size=20&tacdung=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ThuocResource thuocResource : page.getContent()) {
			assertThat(thuocResource.getTacdung()).startsWith("c");
		}
		// Test cachdung filter
		// Set the value on entity and update
		thuoc.setCachdung("c");
		// Process update
		request = new RequestEntity<Thuoc>(thuoc, HttpMethod.PUT, null);
		this.restTemplate.exchange("/thuoc/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test cachdung filter
		result = this.search("/thuoc?size=20&cachdung=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ThuocResource thuocResource : page.getContent()) {
			assertThat(thuocResource.getCachdung()).startsWith("c");
		}
		// Test ngaynhap filter
		// Set the value on entity and update
		thuoc.setNgaynhap("c");
		// Process update
		request = new RequestEntity<Thuoc>(thuoc, HttpMethod.PUT, null);
		this.restTemplate.exchange("/thuoc/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test ngaynhap filter
		result = this.search("/thuoc?size=20&ngaynhap=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (ThuocResource thuocResource : page.getContent()) {
			assertThat(thuocResource.getNgaynhap()).startsWith("c");
		}
	}

	private Thuoc createMocKThuoc(Integer idthuoc, Integer idloaithuoc, Integer idnhasanxuat, String tenthuoc, String tacdung, String cachdung, String ngaynhap, Integer soluong) {
		Thuoc thuocMock = new Thuoc();
		thuocMock.setIdthuoc(idthuoc);
		thuocMock.setIdloaithuoc(idloaithuoc);
		thuocMock.setIdnhasanxuat(idnhasanxuat);
		thuocMock.setTenthuoc(tenthuoc);
		thuocMock.setTacdung(tacdung);
		thuocMock.setCachdung(cachdung);
		thuocMock.setNgaynhap(ngaynhap);
		thuocMock.setSoluong(soluong);
		this.restTemplate.postForLocation("/thuoc", thuocMock);
		return thuocMock;
	}

	private ResponseEntity<PagedResources<ThuocResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<ThuocResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<ThuocResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}