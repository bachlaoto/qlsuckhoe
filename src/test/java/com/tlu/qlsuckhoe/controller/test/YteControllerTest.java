/*
 * Created on 2018-09-27 ( Date ISO 2018-09-27 - Time 09:24:57 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
*/
package com.tlu.qlsuckhoe.controller.test;
import static org.assertj.core.api.Assertions.assertThat;

import org.demo.controller.resource.YteResource;
import com.tlu.qlsuckhoe.entity.Yte;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.test.context.jdbc.Sql;
import org.springframework.test.context.jdbc.Sql.ExecutionPhase;
import org.springframework.test.context.jdbc.SqlGroup;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

// Junit specific runner
@RunWith(SpringJUnit4ClassRunner.class)
// Declare as spring boot test and define the port according to properties in
// src/test/resources/application.properties
@SpringBootTest(webEnvironment = WebEnvironment.DEFINED_PORT)
// Ensure all are clean between two method test execution
@SqlGroup({ @Sql(executionPhase = ExecutionPhase.BEFORE_TEST_METHOD, scripts = "classpath:clean.sql") })
public class YteControllerTest {

	@Autowired
	private TestRestTemplate restTemplate;


	private static final String HOTEN = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String GIOITINH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String NAMSINH = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String DIACHI = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String SOCMT = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String SODT = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String CHUCVU = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String TENDANGNHAP = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final String MATKHAU = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	private static final Integer IDROLE = Integer.valueOf(100);

	private static final String YTECOL = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA";

	@Test
	public void createYteTest() {
		// Create an yte
		Yte yte = createMocKYte(Integer.valueOf(100) , HOTEN, GIOITINH, NAMSINH, DIACHI, SOCMT, SODT, CHUCVU, TENDANGNHAP, MATKHAU, IDROLE, YTECOL);
		// Recover this yte
		ResponseEntity<YteResource> result = this.restTemplate.getForEntity("/yte/1", YteResource.class);
		// The response can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/yte/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getHoten()).isEqualTo(HOTEN);
		assertThat(result.getBody().getGioitinh()).isEqualTo(GIOITINH);
		assertThat(result.getBody().getNamsinh()).isEqualTo(NAMSINH);
		assertThat(result.getBody().getDiachi()).isEqualTo(DIACHI);
		assertThat(result.getBody().getSocmt()).isEqualTo(SOCMT);
		assertThat(result.getBody().getSodt()).isEqualTo(SODT);
		assertThat(result.getBody().getChucvu()).isEqualTo(CHUCVU);
		assertThat(result.getBody().getTendangnhap()).isEqualTo(TENDANGNHAP);
		assertThat(result.getBody().getMatkhau()).isEqualTo(MATKHAU);
		assertThat(result.getBody().getIdrole()).isEqualTo(IDROLE);
		assertThat(result.getBody().getYtecol()).isEqualTo(YTECOL);
		// Try to create the same yte, must return a CONFLICT status code
		result = this.restTemplate.postForEntity("/yte", yte, YteResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.CONFLICT);
		// Response body must not be null
		assertThat(result.getBody()).isNull();
	}

	@Test
	public void updateTest() {
		// Create an yte and assert field
		Yte yte = createMocKYte(Integer.valueOf(100)  , HOTEN, GIOITINH, NAMSINH, DIACHI, SOCMT, SODT, CHUCVU, TENDANGNHAP, MATKHAU, IDROLE, YTECOL);
		// Recover this yte
		ResponseEntity<YteResource> result = this.restTemplate.getForEntity("/yte/1", YteResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		Link link = new Link("http://localhost:9999/yte/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);
		assertThat(result.getBody().getHoten()).isEqualTo(HOTEN);
		assertThat(result.getBody().getGioitinh()).isEqualTo(GIOITINH);
		assertThat(result.getBody().getNamsinh()).isEqualTo(NAMSINH);
		assertThat(result.getBody().getDiachi()).isEqualTo(DIACHI);
		assertThat(result.getBody().getSocmt()).isEqualTo(SOCMT);
		assertThat(result.getBody().getSodt()).isEqualTo(SODT);
		assertThat(result.getBody().getChucvu()).isEqualTo(CHUCVU);
		assertThat(result.getBody().getTendangnhap()).isEqualTo(TENDANGNHAP);
		assertThat(result.getBody().getMatkhau()).isEqualTo(MATKHAU);
		assertThat(result.getBody().getIdrole()).isEqualTo(IDROLE);
		assertThat(result.getBody().getYtecol()).isEqualTo(YTECOL);

		// Change field value

		yte.setHoten("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setGioitinh("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setNamsinh("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setDiachi("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setSocmt("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setSodt("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setChucvu("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setTendangnhap("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setMatkhau("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		yte.setIdrole(Integer.valueOf(200));

		yte.setYtecol("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
		// Process update
		RequestEntity<Yte> request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be OK
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Recover the yte and ensure field are correct
		result = this.restTemplate.getForEntity("/yte/1", YteResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		assertThat(result.getBody()).isNotNull();
		// Assert the Hateoas self link
		link = new Link("http://localhost:9999/yte/1", Link.REL_SELF);
		assertThat(result.getBody().getId()).isEqualTo(link);

		assertThat(result.getBody().getHoten()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getGioitinh()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getNamsinh()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getDiachi()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getSocmt()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getSodt()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getChucvu()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getTendangnhap()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getMatkhau()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");

		assertThat(result.getBody().getIdrole()).isEqualTo(Integer.valueOf(200));

		assertThat(result.getBody().getYtecol()).isEqualTo("BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB");
	}

	@Test
	public void updateNotFoundTest() {
		// Process update
		RequestEntity<Yte> request = new RequestEntity<Yte>(new Yte(), HttpMethod.PUT, null);
		ResponseEntity<Void> resultUpdate = this.restTemplate.exchange("/yte/999", HttpMethod.PUT, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultUpdate).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultUpdate.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteTest() {
		// Create an yte
		createMocKYte(Integer.valueOf(100)  , HOTEN, GIOITINH, NAMSINH, DIACHI, SOCMT, SODT, CHUCVU, TENDANGNHAP, MATKHAU, IDROLE, YTECOL);
		// Recover this yte and test if all is ok
		ResponseEntity<YteResource> result = this.restTemplate.getForEntity("/yte/1", YteResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);

		// Delete the yte
		RequestEntity<Yte> request = new RequestEntity<Yte>(new Yte(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/yte/1", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_CONTENT
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NO_CONTENT);

		// Try to recover the yte and ensure it's don't exist
		// Recover this yte and test if all is ok
		result = this.restTemplate.getForEntity("/yte/1", YteResource.class);
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void deleteNotFound() {
		// Delete the yte
		RequestEntity<Yte> request = new RequestEntity<Yte>(new Yte(), HttpMethod.DELETE, null);
		ResponseEntity<Void> resultDelete = this.restTemplate.exchange("/yte/999", HttpMethod.DELETE, request,
				getTypeRefVoid());
		// The response can't be null
		assertThat(resultDelete).isNotNull();
		// The status code must be NOT_FOUND
		assertThat(resultDelete.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);
	}

	@Test
	public void getYtesTest() {
		// First call assert no element
		ResponseEntity<PagedResources<YteResource>> result = this.search("/yte");
		// The reponse can't be null
		assertThat(result).isNotNull();
		// The status code must be OK
		assertThat(result.getStatusCode()).isEqualTo(HttpStatus.OK);
		// Response body must not be null
		PagedResources<YteResource> page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata()).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(0);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(0);
		// By default page size is 20
		assertThat(page.getMetadata().getSize()).isEqualTo(20);

		// Insert 21 yte
		for (int i = 1; i < 22; i++) {
			createMocKYte(new Integer((int)i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),String.valueOf(i),IDROLE + i,String.valueOf(i));
		}
		result = this.search("/yte");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(2);

		// Change the number of element per page and assert the page number
		result = this.search("/yte?size=3");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(21);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(7);
	}

	@Test
	public void getYtesTestFilter() {
		// Create an yte
		Yte yte = createMocKYte(Integer.valueOf(100) , HOTEN, GIOITINH, NAMSINH, DIACHI, SOCMT, SODT, CHUCVU, TENDANGNHAP, MATKHAU, IDROLE, YTECOL);
		RequestEntity<Yte> request = null;
		ResponseEntity<PagedResources<YteResource>> result = null;
		PagedResources<YteResource> page = null;
		// Test hoten filter
		// Set the value on entity and update
		yte.setHoten("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test hoten filter
		result = this.search("/yte?size=20&hoten=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getHoten()).startsWith("c");
		}
		// Test gioitinh filter
		// Set the value on entity and update
		yte.setGioitinh("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test gioitinh filter
		result = this.search("/yte?size=20&gioitinh=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getGioitinh()).startsWith("c");
		}
		// Test namsinh filter
		// Set the value on entity and update
		yte.setNamsinh("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test namsinh filter
		result = this.search("/yte?size=20&namsinh=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getNamsinh()).startsWith("c");
		}
		// Test diachi filter
		// Set the value on entity and update
		yte.setDiachi("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test diachi filter
		result = this.search("/yte?size=20&diachi=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getDiachi()).startsWith("c");
		}
		// Test socmt filter
		// Set the value on entity and update
		yte.setSocmt("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test socmt filter
		result = this.search("/yte?size=20&socmt=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getSocmt()).startsWith("c");
		}
		// Test sodt filter
		// Set the value on entity and update
		yte.setSodt("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test sodt filter
		result = this.search("/yte?size=20&sodt=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getSodt()).startsWith("c");
		}
		// Test chucvu filter
		// Set the value on entity and update
		yte.setChucvu("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test chucvu filter
		result = this.search("/yte?size=20&chucvu=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getChucvu()).startsWith("c");
		}
		// Test tendangnhap filter
		// Set the value on entity and update
		yte.setTendangnhap("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test tendangnhap filter
		result = this.search("/yte?size=20&tendangnhap=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getTendangnhap()).startsWith("c");
		}
		// Test matkhau filter
		// Set the value on entity and update
		yte.setMatkhau("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test matkhau filter
		result = this.search("/yte?size=20&matkhau=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getMatkhau()).startsWith("c");
		}
		// Test ytecol filter
		// Set the value on entity and update
		yte.setYtecol("c");
		// Process update
		request = new RequestEntity<Yte>(yte, HttpMethod.PUT, null);
		this.restTemplate.exchange("/yte/1", HttpMethod.PUT, request, getTypeRefVoid());
		// Test ytecol filter
		result = this.search("/yte?size=20&ytecol=c");
		// Response body must not be null
		page = result.getBody();
		assertThat(page).isNotNull();
		assertThat(page.getMetadata().getTotalElements()).isEqualTo(1);
		assertThat(page.getMetadata().getTotalPages()).isEqualTo(1);
		for (YteResource yteResource : page.getContent()) {
			assertThat(yteResource.getYtecol()).startsWith("c");
		}
	}

	private Yte createMocKYte(Integer idyte, String hoten, String gioitinh, String namsinh, String diachi, String socmt, String sodt, String chucvu, String tendangnhap, String matkhau, Integer idrole, String ytecol) {
		Yte yteMock = new Yte();
		yteMock.setIdyte(idyte);
		yteMock.setHoten(hoten);
		yteMock.setGioitinh(gioitinh);
		yteMock.setNamsinh(namsinh);
		yteMock.setDiachi(diachi);
		yteMock.setSocmt(socmt);
		yteMock.setSodt(sodt);
		yteMock.setChucvu(chucvu);
		yteMock.setTendangnhap(tendangnhap);
		yteMock.setMatkhau(matkhau);
		yteMock.setIdrole(idrole);
		yteMock.setYtecol(ytecol);
		this.restTemplate.postForLocation("/yte", yteMock);
		return yteMock;
	}

	private ResponseEntity<PagedResources<YteResource>> search(String uri) {
		return this.restTemplate.exchange(uri, HttpMethod.GET, null, getTypeRef());
	}

	private ParameterizedTypeReference<PagedResources<YteResource>> getTypeRef() {
		return new ParameterizedTypeReference<PagedResources<YteResource>>() {
		};
	}

	private ParameterizedTypeReference<Void> getTypeRefVoid() {
		return new ParameterizedTypeReference<Void>() {
		};
	}
}